AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: CodeStar projectId used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''
  DBUsername:
    Description: DB master username
    Type: String
    MinLength: 1
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: Must contain only alphanumeric characters.

Globals:
  Function:
    AutoPublishAlias: live
    Runtime: python3.8
    MemorySize: 512
    Timeout: 300
    DeploymentPreference:
      Enabled: true
      Type: AllAtOnce
      Role: !Ref CodeDeployRole

Resources:
  # Main S3 bucket for soundprint project to hold all historical pulled data as well as source code and processed data
  # Has a lifecycle policy of 10 days to clear out all data under history/
  SoundprintS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectId}-bucket'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: HistoryLifecycleRule
            Prefix: 'history/'
            Status: Enabled
            ExpirationInDays: 10

  # SecretsManager for containing username and password for accessing Soundprint's archival DB
  SoundprintDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectId}-db-secret'
      Description: Auto-generated user-password for DB
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBUsername}"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  # Aurora Serverless DB to archive all soundprint records
  SoundprintAuroraCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DatabaseName: !Sub '${ProjectId}db'
      EnableHttpEndpoint: true
      Engine: aurora-mysql
      EngineVersion: 5.7.12
      EngineMode: serverless
      ScalingConfiguration:
        AutoPause: true
        SecondsUntilAutoPause: 300
        MinCapacity: 2
        MaxCapacity: 64
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref SoundprintDBSecret, ':SecretString:username}}']]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref SoundprintDBSecret, ':SecretString:password}}']]

  # Common Lambda IAM role for all lambda functions in soundprint
  # Has executable permissions along with access to S3 bucket, dynamodb table and AuroraDB for the project
  SoundprintLambdaRole:
    Type: AWS::IAM::Role
    Description: Creating IAM role for Lambda functions
    Properties:
      RoleName: !Sub '${ProjectId}-lambda-exec-resources-role'
      Description: IAM Role held by lambda functions under the Soundprint project
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: SoundprintBucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: !Sub 'arn:${AWS::Partition}:s3:::${ProjectId}-bucket/*'
        - PolicyName: SoundprintDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: 'arn:aws:dynamodb:us-west-2:212033165103:table/SpotifyTokenState'
        - PolicyName: SoundprintSecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                Resource: !Ref SoundprintDBSecret
        - PolicyName: SoundprintAuroraAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource:
                - !Sub 'arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:${SoundprintAuroraCluster}'
        - PolicyName: DescribeRDSClusters
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: rds:DescribeDBClusters
                Resource: !Sub 'arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:*'

  # Listener lambda function that gets triggered by a scheduled-event every hour and pulls the spotify tracks
  # listened to in the last hour. These are then archived in the S3 bucket under history/listening/
  SoundprintSpotifyListener:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectId}-lambda-spotify-listener'
      Description: Pulls recently heard Spotify tracks in the last hour, triggered at the start of every hour
      Handler: src.lambda.spotifylistener.lambda_handler
      Role: !GetAtt SoundprintLambdaRole.Arn

  SpotifyListenerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SoundprintSpotifyListener}'
      RetentionInDays: 14

  # Lambda function triggered by creation of files under history/listening/. Gathers metadata about tracks
  # listened to in that hour and archives them under history/tracks/
  SoundprintSpotifyTracker:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectId}-lambda-spotify-tracker'
      Description: Compiles track metadata by track-id, triggered upon creation of file with recently played tracks
      Handler: src.lambda.spotifytracker.lambda_handler
      Role: !GetAtt SoundprintLambdaRole.Arn

  SpotifyTrackerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SoundprintSpotifyTracker}'
      RetentionInDays: 14

  # Lambda function triggered by creation of track-metadata file under history/tracks/. For each track, pulls the
  # album metadata and archives under history/albums/
  SoundprintSpotifyAlbumer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectId}-lambda-spotify-albumer'
      Description: Compiles album metadata by album-id upon creation of file with track metadata
      Handler: src.lambda.spotifyalbumer.lambda_handler
      Role: !GetAtt SoundprintLambdaRole.Arn

  SpotifyAlbumerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SoundprintSpotifyAlbumer}'
      RetentionInDays: 14

  # Lambda function triggered by creation of track-metadata file under history/tracks/. For each track, pulls the
  # artist metadata and archives under history/artists/
  SoundprintSpotifyArtister:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectId}-lambda-spotify-artister'
      Description: Compiles artist metadata by artist-id upon creation of file with track metadata
      Handler: src.lambda.spotifyartister.lambda_handler
      Role: !GetAtt SoundprintLambdaRole.Arn

  SpotifyArtisterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SoundprintSpotifyArtister}'
      RetentionInDays: 14

  # Lambda function that joins separate dataframes for recently listened tracks, their track-metadata,
  # their album-metadata and artist-metadata. Triggered after all these files have been uploaded to S3.
  # After joining, uploads the joined file to history/data/
  SoundprintSpotifyJoiner:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectId}-lambda-spotify-joiner'
      Description: Joins individual tables containing various metadata for recently heard tracks into a single table
      Handler: src.lambda.spotifyjoiner.lambda_handler
      Role: !GetAtt SoundprintLambdaRole.Arn

  SpotifyJoinerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SoundprintSpotifyJoiner}'
      RetentionInDays: 14

  # Lambda function that takes the recently-created history data file containing joined data for listening-records,
  # track-metadata, album-metadata and artist-metadata and archives it in the RDS Aurora DB
  SoundprintSpotifyRdsArchiver:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectId}-lambda-spotify-rds-archiver'
      Description: Archives the joined data-table to RDS Aurora DB that serves as a non-ephemeral record of all history
      Handler: src.lambda.archiver.spotifyrdsarchiver.lambda_handler
      Timeout: 1200
      Role: !GetAtt SoundprintLambdaRole.Arn

  SpotifyRdsArchiverLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SoundprintSpotifyRdsArchiver}'
      RetentionInDays: 14

  # StateMachine orchestrating workflow using Lambda functions
  SoundprintStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub '${ProjectId}-state-machine'
      Events:
        ScheduleHourEvent:
          Type: Schedule
          Properties:
            Schedule: 'cron(0 * * * ? *)'
            RetryPolicy:
              MaximumEventAgeInSeconds: 1800
      Role: !GetAtt SoundprintStateMachineRole.Arn
      Definition:
        StartAt: ListenState
        States:
          ListenState:
            Type: Task
            Resource: !GetAtt SoundprintSpotifyListener.Arn
            ResultPath: $.listening
            Next: TrackState
          TrackState:
            Type: Task
            Resource: !GetAtt SoundprintSpotifyTracker.Arn
            InputPath: $.listening
            ResultPath: $.tracks
            Next: AlbumArtistState
          AlbumArtistState:
            Type: Parallel
            ResultPath: $.albums_artists
            Branches:
              - StartAt: AlbumState
                States:
                  AlbumState:
                    Type: Task
                    Resource: !GetAtt SoundprintSpotifyAlbumer.Arn
                    InputPath: $.tracks
                    ResultPath: $
                    End: true
              - StartAt: ArtistState
                States:
                  ArtistState:
                    Type: Task
                    Resource: !GetAtt SoundprintSpotifyArtister.Arn
                    InputPath: $.tracks
                    ResultPath: $
                    End: true
            Next: JoinState
          JoinState:
            Type: Task
            Resource: !GetAtt SoundprintSpotifyJoiner.Arn
            Parameters:
              listening.$: $.listening
              tracks.$: $.tracks
              albums.$: $.albums_artists[0]
              artists.$: $.albums_artists[1]
            ResultPath: $.data
            Next: ArchiveState
          ArchiveState:
            Type: Task
            Resource: !GetAtt SoundprintSpotifyRdsArchiver.Arn
            InputPath: $.data
            ResultPath: null
            End: true

  # Role for StateMachine orchestrating Lambda workflow
  SoundprintStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectId}-state-machine-role'
      Description: IAM Role for execution of lambda orchestrating state machine for Soundprint
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ states.amazonaws.com ]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SoundprintLambdaInvocationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource:
                  - !GetAtt SoundprintSpotifyListener.Arn
                  - !GetAtt SoundprintSpotifyTracker.Arn
                  - !GetAtt SoundprintSpotifyAlbumer.Arn
                  - !GetAtt SoundprintSpotifyArtister.Arn
                  - !GetAtt SoundprintSpotifyJoiner.Arn
                  - !GetAtt SoundprintSpotifyRdsArchiver.Arn
